[{"filePath":"/gcl-builds/binarywizards-webapp/src/App.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":15,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport HomeScreen from './pages/HomeScreen';\nimport JoinQuiz from './pages/JoinQuiz';\nimport CreateQuiz from './pages/CreateQuiz';\n\nimport QuestionScreen from './pages/QuestionScreen.js';\n\nimport EndScreen from './pages/EndScreen';\nimport Navbar from './components/Navbar';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Routes>\n        <Route path=\"/\" element={<HomeScreen />} />\n        <Route path=\"/join-quiz\" element={<JoinQuiz />} />\n        <Route path=\"/create-quiz\" element={<CreateQuiz />} />\n\n        <Route path=\"/question\" element={<Navigate to=\"/\" replace />}/>\n        <Route path=\"/question/:id\" element={<QuestionScreen />}/>\n\n        <Route path=\"/end\" element={<EndScreen />} />\n\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/components/Navbar.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":7,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../assets/Navbar.css';\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\"Navbar\">\r\n      <div className=\"Navbar-logo\">\r\n        <NavLink to=\"/\" className={({ isActive }) => (isActive ? 'active-link' : '')}>MyQuizApp</NavLink>\r\n      </div>\r\n      <ul className=\"Navbar-links\">\r\n        <li><NavLink to=\"/\" className={({ isActive }) => (isActive ? 'active-link' : '')}>Home</NavLink></li>\r\n        <li><NavLink to=\"/join-quiz\" className={({ isActive }) => (isActive ? 'active-link' : '')}>Join Quiz</NavLink></li>\r\n        <li><NavLink to=\"/create-quiz\" className={({ isActive }) => (isActive ? 'active-link' : '')}>Create Quiz</NavLink></li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/components/QuestionChoiceMultiple.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":5,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '../assets/QuestionChoiceMultiple.css';\n\nexport default function QuestionChoiceMultiple({ question_choice, correctOptionIndex, selectedQuestionId, isAnswered, onQuestionSelect }) {\n  return (\n    <div className=\"QuestionChoiceMultiple\">\n      {question_choice.map((choice, index) => {\n        // Initialize a variable for the button's class\n        let buttonClass = '';\n\n        // Apply the 'correct-answer' class to the correct answer\n        if (index === correctOptionIndex) {\n          buttonClass = 'correct-answer'; // Apply the class to the correct answer\n        }\n\n        // If the answer is incorrect, apply the 'incorrect-answer' class\n        if (selectedQuestionId !== null && correctOptionIndex !== null && selectedQuestionId === index && selectedQuestionId !== correctOptionIndex) {\n          buttonClass = 'incorrect-answer'; // Apply the 'incorrect-answer' class for an incorrect answer\n        }\n\n        return (\n          <div key={index} className=\"choice\">\n            <button\n              onClick={() => onQuestionSelect(index)}\n              className={`${selectedQuestionId === index ? 'selected-button' : ''} ${buttonClass}`}\n              style={{\n                cursor: isAnswered ? 'not-allowed' : 'pointer', // Apply 'cursor: not-allowed' if the answer has been submitted\n              }}\n              disabled={isAnswered} // Disable the button once the answer is submitted\n            >\n              {choice}\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/components/QuestionHUD.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":4,"column":9,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default function QuestionHUD({party_parameters}){\n\n    return (\n        <div>\n            <h3>Quiz ID : {party_parameters.idquizz}</h3>\n            <h3>Score : {party_parameters.score}</h3>\n            <h3>Question : {party_parameters.question_index} / {party_parameters.nb_questions_total}  </h3>\n        </div>\n    )\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/config.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":2,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":2,"endColumn":52,"fix":{"range":[36,69],"text":"\"https://klebert-host.com:33012/\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const config = {\r\n    API_BASE_URL: 'https://klebert-host.com:33012/',\r\n  };\r\n  \r\n  export default config;\r\n  ","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/index.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":9,"column":3,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/pages/CreateQuiz.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":71,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../assets/CreateQuiz.css';\nimport CreateQuizService from '../services/CreateQuizService';\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nexport default function CreateQuiz() {\n  const [categories, setCategories] = useState([]);\n  const [difficulties, setDifficulties] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [amount, setAmount] = useState('');\n  const [difficulty, setDifficulty] = useState('easy');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    CreateQuizService.fetchCategories()\n      .then(data => setCategories(data))\n      .catch(error => toast.info('Error fetching categories:', error));\n\n    CreateQuizService.fetchDifficulties()\n      .then(data => setDifficulties(data))\n      .catch(error => toast.info('Error fetching difficulties:', error));\n  }, []);\n\n  const handleSubmit = () => {\n\n\n    if (!amount || isNaN(amount) || amount <= 0) {\n      toast.info('Please enter a valid number of questions (greater than 0).');\n      return;\n    }\n\n    let selectedCat = selectedCategory;\n    if (selectedCat === '') {\n      const randomIndex = Math.floor(Math.random() * categories.length);\n      selectedCat = categories[randomIndex].id;\n    }\n\n    const quizData = {\n      category: selectedCat,\n      amount: Number(amount),\n      difficulty,\n    };\n    CreateQuizService.createQuiz(quizData)\n    .then(data => {\n      const quizId = data.quiz_id;\n      navigate(`/question/${quizId}`);\n    })\n    .catch(error => {\n      \n      toast.info(error.message);\n      console.log(error);\n    });\n  };\n\n  const handleAmountInput = (e) => {\n    const value = e.target.value.replace(/[^\\d]/g, '');\n    setAmount(value);\n  };\n\n  const handleKeyDown = (e) => {\n    if (!/\\d/.test(e.key) && e.key !== 'Backspace' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight' && e.key !== 'Delete') {\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <div className=\"CreateQuiz-container\">\n      <ToastContainer />\n      <div className=\"CreateQuiz-box\">\n        <h1>Create a Quiz</h1>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category:</label>\n          <select\n            id=\"category\"\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(Number(e.target.value))}\n          >\n            <option value=\"\">Please select a category</option>\n            {categories.map((category) => (\n              <option key={category.id} value={category.id}>{category.name}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"number\">Number of questions:</label>\n          <input\n            type=\"number\"\n            id=\"number\"\n            value={amount}\n            onInput={handleAmountInput}\n            onKeyDown={handleKeyDown}\n            placeholder=\"Enter the number of questions\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"difficulty\">Difficulty:</label>\n          <select\n            id=\"difficulty\"\n            value={difficulty}\n            onChange={(e) => setDifficulty(e.target.value)}\n          >\n            <option value={\"\"}>Any</option>\n            {difficulties.map((level) => (\n              <option key={level} value={level}>\n                {level.charAt(0).toUpperCase() + level.slice(1)}\n              </option>\n            ))}\n\n          </select>\n        </div>\n        <button onClick={handleSubmit}>Start</button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/pages/EndScreen.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":33,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport \"../assets/EndScreen.css\";\r\nimport { resetQuiz } from \"../services/EndScreenService\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n\r\nexport default function EndScreen() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { score, correct_answers_nb,nb_questions_total, quizId } = location.state || {\r\n    score: null,\r\n    correct_answers_nb: null,\r\n    nb_questions_total: null,\r\n    quizId: null,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (score === null || correct_answers_nb === null || nb_questions_total === null|| quizId === null) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [score, correct_answers_nb,nb_questions_total, quizId,navigate]);\r\n\r\n  const handleRestartQuiz = async () => {\r\n    if (quizId) {\r\n      await resetQuiz(quizId);\r\n      navigate(`/question/${quizId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"EndScreen\">\r\n            <ToastContainer />\r\n      <div className=\"EndScreenContainer\">\r\n        {score !== null && correct_answers_nb !== null && nb_questions_total !== null ? (\r\n          <>\r\n            <h1>Quiz Completed!</h1>\r\n            <h2>Your Score: {score}</h2>\r\n            <h2>Correct answer : {correct_answers_nb}/{nb_questions_total}</h2>\r\n           \r\n\r\n            <button onClick={() => navigate(\"/\")}>Back to home page</button>\r\n            <button onClick={handleRestartQuiz}>Restart Quiz</button>\r\n          </>\r\n        ) : (\r\n          <p className=\"errorMessage\">Error: The result could not be retrieved.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/pages/HomeScreen.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":9,"column":9,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../assets/HomeScreen.css';\r\n\r\nexport default function HomeScreen() {\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Quiz</h1>\r\n            <div className=\"button-group\">\r\n                <button onClick={() => navigate('/join-quiz')}>Join quiz</button>\r\n                <button onClick={() => navigate('/create-quiz')}>Create quiz</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/pages/JoinQuiz.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":38,"column":5,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../assets/JoinQuiz.css';\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { checkQuizExists } from '../services/JoinQuizService';\r\n\r\n\r\nexport default function JoinQuiz() {\r\n  const [gameCode, setGameCode] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleJoin = async () => {\r\n    if (gameCode.trim() === '') {\r\n      toast.info('Please enter a valid game code.');\r\n\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setErrorMessage('');\r\n\r\n    try {\r\n      await checkQuizExists(gameCode);\r\n      navigate(`/question/${gameCode}`);\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"JoinQuizContainer\">\r\n      <ToastContainer />\r\n      <div className=\"JoinQuizForm\">\r\n        <h1>Join a Game</h1>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"gameCode\">Game Code:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"gameCode\"\r\n            value={gameCode}\r\n            onChange={(e) => setGameCode(e.target.value)}\r\n            placeholder=\"Enter the game code\"\r\n          />\r\n        </div>\r\n        <button onClick={handleJoin} disabled={isLoading}>\r\n          {isLoading ? 'Joining...' : 'Join'}\r\n        </button>\r\n        {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/pages/QuestionScreen.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":103,"column":12,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport QuestionHUD from '../components/QuestionHUD';\nimport QuestionChoiceMultiple from '../components/QuestionChoiceMultiple';\nimport '../assets/QuestionScreen.css';\nimport { GetQuestion, PostAnswers } from '../services/QuestionService';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// Function for retrieving API data\n\nexport default function QuestionScreen() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // States to store quiz data\n  const [questionText, setQuestionText] = useState(''); // Question text\n  const [options, setOptions] = useState([]);           // Array containing available answers\n  const [questionIndex, setQuestionIndex] = useState(); // Index of the current question\n  const [nbQuestionsTotal, setNbQuestionsTotal] = useState();   // Total number of questions\n  const [score, setScore] = useState();                 // Current player's score\n  const [totalScore, setTotalScore] = useState();       // Total score the player can achieve\n  const [questionType, setQuestionType] = useState(''); // Question type (unused)\n  const [questionDifficulty, setQuestionDifficulty] = useState(''); // Question difficulty\n  const [questionCategory, setQuestionCategory] = useState('');    // Question category\n  const [loading, setLoading] = useState(true); // State to show loading status\n  const [error, setError] = useState(null); // State to display errors\n  const [selectedQuestionId, setSelectedQuestionId] = useState(null); // State to store the selected answer\n  const [isAnswered, setIsAnswered] = useState(false); // State to block multiple answer submissions\n  const [idCorrectAnswers, setIdCorrectAnswers] = useState(); // State to store the correct answer(s)\n \n  // Function to retrieve and update quiz data\n  const handleFetchQuiz = async () => {\n    try {\n      // Retrieves the question & answer\n      const data = await GetQuestion(id);\n\n      // Checks if the quiz is finished\n      if (data.quiz_finished) {\n        setTotalScore(data.max_score);\n        setScore(data.score);\n\n        if (data.quiz_finished) {\n          navigate('/end', {\n              state: { score: data.score, correct_answers_nb: data.correct_answers_nb,nb_questions_total:data.nb_questions_total, quizId: id },\n          });\n          return;\n        }\n      }\n\n      // Updates states with received data if the quiz is not finished\n      setQuestionText(data.question_text);\n      setOptions(data.options);\n      setQuestionIndex(data.question_index);\n      setNbQuestionsTotal(data.nb_questions_total);\n      setScore(data.score);\n      setQuestionType(data.question_type);\n      setQuestionDifficulty(data.question_difficulty);\n      setQuestionCategory(data.question_category);\n      setSelectedQuestionId(null); // Resets the selection\n      setIsAnswered(false); // Resets the submission status for the new question\n      setIdCorrectAnswers(null); // Resets the correct answer state\n      // setTotalScore(data.total_score);\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    handleFetchQuiz();\n  }, []);\n\n  // Submit the answer when selecting an option\n  const handleQuestionSelect = async (selectedId) => {\n    if (!isAnswered) { // Checks if an answer has not already been submitted\n      setSelectedQuestionId(selectedId); // Updates the selected answer\n      setIsAnswered(true); // Marks that the answer has been submitted\n\n      try {\n        const result = await PostAnswers(id, questionIndex, selectedId); // Sends the answer via POST and retrieves the server's response\n        setIdCorrectAnswers(result.correct_option_index); // Saves the index of the correct answer\n      } catch (error) {\n        toast.error('Error sending answers');\n      }\n    }\n  };\n\n  // Load the next question when clicking \"Next Question\"\n  const handleReload = () => {\n    setLoading(true);\n    handleFetchQuiz(); // Load the next question\n  };\n\n  const paramHUD = {\n    idquizz: id,\n    score: score,\n    question_index: questionIndex,\n    nb_questions_total: nbQuestionsTotal,\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"QuestionScreen\">\n            <ToastContainer />\n      <div className=\"HUD\">\n        <QuestionHUD party_parameters={paramHUD} />\n      </div>\n\n      <h1 className=\"Question\">{questionText}</h1>\n\n      <div className=\"Answers\">\n        <QuestionChoiceMultiple\n          question_choice={options}\n          correctOptionIndex={idCorrectAnswers}\n          onQuestionSelect={handleQuestionSelect}\n          selectedQuestionId={selectedQuestionId}\n          isAnswered={isAnswered}  // Pass the state of the answer submission\n        />\n\n        <button\n          className={`validate-button ${!isAnswered ? 'disabled' : ''}`}\n          onClick={handleReload}\n          disabled={!isAnswered}  // Disables the button if no answer is selected\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/reportWebVitals.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":3,"column":12,"nodeType":"Literal","messageId":"wrongQuotes","endLine":3,"endColumn":24,"fix":{"range":[108,120],"text":"\"web-vitals\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/services/CreateQuizService.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":31,"fix":{"range":[19,30],"text":"\"../config\""}},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastContainer' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":2,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":7,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":12,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":17,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":17},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":18,"column":15,"nodeType":"Literal","messageId":"wrongQuotes","endLine":18,"endColumn":21,"fix":{"range":[537,543],"text":"\"POST\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":20,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":20,"endColumn":23,"fix":{"range":[572,586],"text":"\"Content-Type\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":20,"column":25,"nodeType":"Literal","messageId":"wrongQuotes","endLine":20,"endColumn":43,"fix":{"range":[588,606],"text":"\"application/json\""}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import config from '../config';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst CreateQuizService = {\r\n  fetchCategories: () => {\r\n    return fetch(`${config.API_BASE_URL}categories`)\r\n      .then(response => response.json());\r\n  },\r\n  \r\n  fetchDifficulties: () => {\r\n    return fetch(`${config.API_BASE_URL}difficulties`)\r\n      .then(response => response.json());\r\n  },\r\n\r\n  createQuiz: (quizData) => {\r\n    return fetch(`${config.API_BASE_URL}quiz`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(quizData),\r\n    })\r\n    .then(async response => {\r\n      if (!response.ok) {\r\n        // Recovers response data even in the event of an error\r\n        const errorData = await response.json();\r\n        \r\n        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    });\r\n  }\r\n};\r\n\r\nexport default CreateQuizService;\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/services/EndScreenService.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":31,"fix":{"range":[19,30],"text":"\"../config\""}},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastContainer' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":9,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import config from '../config';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n\r\nexport async function resetQuiz(quizId) {\r\n    try {\r\n        const url = `${config.API_BASE_URL}quiz/${quizId}`;\r\n        await fetch(`${url}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        });\r\n        toast.info(\"Quiz reset successfully\");\r\n    } catch (error) {\r\n        toast.error(\"Failed to reset quiz: \"+ error);\r\n    }\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/services/JoinQuizService.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":31,"fix":{"range":[19,30],"text":"\"../config\""}},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastContainer' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":6,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":33},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":8,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":8,"endColumn":35,"fix":{"range":[331,347],"text":"\"Quiz not found\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":12,"column":17,"nodeType":"Literal","messageId":"wrongQuotes","endLine":12,"endColumn":39,"fix":{"range":[424,446],"text":"\"Error checking quiz:\""}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import config from '../config';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nexport const checkQuizExists = async (gameCode) => {\r\n  try {\r\n    const response = await fetch(`${config.API_BASE_URL}quiz/${gameCode}/question`);\r\n    if (!response.ok) {\r\n      toast.error('Quiz not found');\r\n    }\r\n    return response.json();\r\n  } catch (error) {\r\n    toast.error('Error checking quiz:', error);\r\n    //throw error;\r\n  }\r\n};","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/services/QuestionService.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":31,"fix":{"range":[19,30],"text":"\"../config\""}},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastContainer' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":7,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":17},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":10,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":10,"endColumn":44,"fix":{"range":[328,349],"text":"\"Data recovery error\""}},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":26,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":17},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":27,"column":15,"nodeType":"Literal","messageId":"wrongQuotes","endLine":27,"endColumn":21,"fix":{"range":[750,756],"text":"\"POST\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":29,"column":9,"nodeType":"Literal","messageId":"wrongQuotes","endLine":29,"endColumn":23,"fix":{"range":[783,797],"text":"\"Content-Type\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":29,"column":25,"nodeType":"Literal","messageId":"wrongQuotes","endLine":29,"endColumn":43,"fix":{"range":[799,817],"text":"\"application/json\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":35,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":35,"endColumn":48,"fix":{"range":[957,982],"text":"\"Error sending responses\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":40,"column":21,"nodeType":"Literal","messageId":"wrongQuotes","endLine":40,"endColumn":46,"fix":{"range":[1080,1105],"text":"\"Error sending response:\""}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import config from '../config';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nexport async function GetQuestion(id_quizz) {\n    return fetch(`${config.API_BASE_URL}quiz/${id_quizz}/question`)\n      .then(response => {\n        if (!response.ok) {\n          toast.error('Data recovery error');\n        }\n        return response.json();\n      })\n      .catch(error => {\n        toast.error(error);\n      });\n  }\n  \n\n  export async function PostAnswers(id_quizz, index_question, index_reponse) {\n    const quizQuestionPost = {\n      question_index: index_question,\n      option_index: index_reponse,\n    };\n  \n    return fetch(`${config.API_BASE_URL}quiz/${id_quizz}/question`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(quizQuestionPost),\n    })\n      .then(response => {\n        if (!response.ok) {\n          toast.error('Error sending responses');\n        }\n        return response.json();\n      })\n      .catch(error => {\n        toast.error('Error sending response:'+error);\n        //throw error;\n      });\n  }","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]},{"filePath":"/gcl-builds/binarywizards-webapp/src/setupTests.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":5,"column":8,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":35,"fix":{"range":[212,239],"text":"\"@testing-library/jest-dom\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]}]}]