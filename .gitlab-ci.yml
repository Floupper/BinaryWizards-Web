image: node:18

stages:
  - lint
  - test
  - coverage
  - build
  - deploy

lint:
  script:
    - npm install 
    - npx eslint "src/**/*.js" -f json -o lint-es.json 
    - npx htmlhint "src/**/*.html" --format json > lint-html.json 
    - npx stylelint "src/**/*.{css,scss}" -f json > lint-style.json  
    - jq -s add lint-es.json lint-html.json lint-style.json > lint.json
  artifacts:
    when: always
    paths:
      - lint.json
  allow_failure: true

test:
  script:
    - npm install 
    - npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=test-results.xml
  artifacts:
    when: always
    reports:
      junit:
        - test-results.xml 
    paths:
      - test-results.xml
  allow_failure: true

coverage:
  script:
    - apt-get update && apt-get install -y python3-pip  
    - pip3 install coverage pytest 
    - coverage run -m pytest
    - coverage report 
    - coverage xml  
  artifacts:
    when: always
    paths:
      - coverage.xml
  allow_failure: true

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

build:
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
  script:
    - echo "Waiting for Docker Daemon..."
    - sleep 10
    - docker info
    - docker ps
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/web-test:latest .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH/web-test:latest
  needs:
    - lint
    - test
    - coverage