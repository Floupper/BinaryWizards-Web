image: node:18

stages:
  - lint
  - test
  - coverage
  - build
  - deploy

lint:
  script:
    - npm install 
    - npx eslint "binarywizards-webapp/src/**/*.js" -f json -o lint-es.json    
    - npx stylelint "binarywizards-webapp/src/**/*.js" -f json > lint-style.json 
    - jq -s add lint-es.json lint-style.json > lint.json
  artifacts:
    when: always
    paths:
      - lint.json
  allow_failure: true

test:
  script:
    - npm install 
    - npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=test-results.xml
  artifacts:
    when: always
    reports:
      junit:
        - test-results.xml 
    paths:
      - test-results.xml
  allow_failure: true

coverage:
  script:
    - apt-get update && apt-get install -y python3-pip  
    - pip3 install coverage pytest 
    - coverage run -m pytest
    - coverage report 
    - coverage xml  
  artifacts:
    when: always
    paths:
      - coverage.xml
  allow_failure: true

build:
  image: docker:20.10
  services:
    - name: docker:20.10-dind
      command: ["--privileged"]
  variables:
    DOCKER_HOST: "tcp://docker:2375"
  script:
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin 
    - docker info  # Display Docker info to check the connection
    - docker ps  # List running containers to verify Docker is working
    - docker build -t $DOCKER_USERNAME/s5-01 .
    - docker push DOCKER_USERNAME/s5-01 
  needs:
    - lint
    - test
    - coverage