image: alpine:3.20

services:
  - docker:dind

stages:
  - lint
  - test
  - coverage
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: louisschlegel/s5-01

lint:
  stage: lint
  before_script:
    - apk add --no-cache nodejs npm
  script:
    - npm install
    - npx eslint "binarywizards-webapp/src/**/*.js" -f json -o lint-es.json
    - npx stylelint "binarywizards-webapp/src/**/*.js" -f json > lint-style.json
    - jq -s add lint-es.json lint-style.json > lint.json
  artifacts:
    when: always
    paths:
      - lint.json
  allow_failure: true

test:
  stage: test
  before_script:
    - apk add --no-cache nodejs npm
  script:
    - npm install
    - npm install --save-dev jest-junit
    - jest --ci --reporters=default --reporters=jest-junit
  variables:
    JEST_JUNIT_OUTPUT: "test-results.xml"
  artifacts:
    when: always
    reports:
      junit:
        - test-results.xml
    paths:
      - test-results.xml
  allow_failure: true

coverage:
  stage: coverage
  before_script:
    - apk add --no-cache python3 py3-pip
  script:
    - pip3 install coverage pytest
    - coverage run -m pytest
    - coverage report
    - coverage xml
  artifacts:
    when: always
    paths:
      - coverage.xml
  allow_failure: true

build:
  stage: build
  before_script:
    - apk add --no-cache docker-cli
  script:
    - docker buildx build --tag $IMAGE_NAME .

deploy:
  stage: deploy
  script:
    - echo dckr_pat_cgHw5bMXCea_7-nzz7ykmol57eM | docker login -u louisschlegel --password-stdin
    - docker push $IMAGE_NAME